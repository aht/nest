\====================
\title NEST Tutorial
\====================

\style<
	body { margin: 20px 15%; }
	p { max-width: 36em }
>

\body<

\h2 Introduction
\================

\p:
	NEST stands for \em<Notation for Expressing Structured Text>. It is a markup
	language with the same semantics as XML but is designed to be more readable
	and easier to write by hand.


\h2 Syntax
\==========

\p:
	NEST can express familiar XML concepts such as elements, tags and attributes.
	A structural element is introduced by a backslash followed by the tag name;
	the content of the element follows in enclosing angle brackets, like this:
\pre<
    \\html <
        Your page goes here.
    \>
>

\p:
	There are two shortcuts to make NEST more human-friendly than XML:

\p:
	Tags without following brackets take the rest of the line to be the
	content, e.g.
\pre<
    \\title NEST documentation
    \\author Yours truly
>

\p:
	Tags followed by a colon take an indented block to be the content, e.g.
\pre<
    \\blockquote:
        Immature poets imitate; mature poets steal; bad poets
        deface what they take, and good poets make it into
        something better, or at least something different.
        â€” T.S. Eliot, The Sacred Wood
>

\p:
	Attributes are placed between the tag and the content in enclosing square
	brackets,  similarly to XML, e.g.
\pre<
    \\div [id="main" class="long article"] < ... \>
>

\p:
	NEST's directives can be escaped with the backslash, for example
	\code<\\\\tag> is a literal \code<\\tag> (in contrast, a \code<\<tag\>> in
	XML is \code<&lt;tag&gt;>).  Brackets that are not part of any tag are
	also treated as literals.

\p:
	NEST allows comments in the form of
	\code<\\==+ < ... >> or
	\code<\\--+ < ... >>.
	Empty comments should be used decoratively to make NEST source code more readable, e.g.
\pre<
    \\h2 Introduction
    \\----------------
>


\h2 Transformation
\==================
\p:
	Since NEST is a markup language, you can interpret the structured text
	however you want.

\h3 NEST to XML
\---------------
\p:
	XML is understood everywhere else, and NEST was originally invented to make
	writing XML easier anyway. The program \code<n2x> performs this
	transformation.  It is implemented using PLY (Python lex/yacc).

\h3 XML to NEST
\---------------
\p:
	The converse transformation from XML to NEST is quite easy.
	A simple \code<sed> script, provided as x2n, can work for many
	X(H)TML files.
\p:
	\code<sed>, however, is not a real parser and you cannot convert
	tag declarations spreading over many lines.  A better converter may be
	written in the future if needed.


\h2 Q&A
\=======

\div[class=q] \h4 What can be expressed in SGML but not in NEST?
\div[class=a] \p:
	Overlapping tags, e.g.
	\pre<    <foo\> spam <bar\> inter-mingled with </foo\> ham </bar\>>
	I certainly hope that this "feature" will not be missed!

\div[class=q] \h4 What's the relation between NEST and XML?
\div[class=a] \p:
	NEST is a markup language with the same semantics as XML. Practically, this
	means that NEST is an alternative notation for XML.

\div[class=q] \h4 What's the relation between NEST and HAML?
\div[class=a] \p:
	NEST is a markup language with the same semantics as XML, whereas HAML is a
	both a pre-processor for XHTML and a templating engine.  NEST is simpler
	than HAML, yet more human-friendly.  For example, it is easier to nest
	multiple tags on the same line.  White-space preservation is also an issue
	with HAML: it is very awkward to write code and poetry.  NEST also
	supports more flexible indentation rules.

\div[class=q] \h4 What's the relation between NEST and YAML?
\div[class=a] \p:
	NEST is a textual markup language, whereas YAML is a data serialization
	format.  NEST is suitable for documents that are mainly text.

>
